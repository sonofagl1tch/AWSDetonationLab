{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "This template creates the basic VPC infrastructure for an isolated testing environment. It will deploy a bastion host into the public subnet for a single Availability Zone so we have a protected point of entry. It will then create a linux instance with some red team scripts & tools that operate against common applications that are created in the same private subnet. **WARNING** This template creates Amazon EC2 instance and related resources. You will be billed for the AWS resources used if you create a stack from this template.",
  "Resources": {
    "BasicLinuxIAMRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess"
        ]
      }
    },
    "BasicLinuxInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Roles": [
          {
            "Ref": "BasicLinuxIAMRole"
          }
        ],
        "Path": "/"
      }
    },
    "BasicLinuxNetInt": {
      "Type": "AWS::EC2::NetworkInterface",
      "Properties": {
        "SubnetId": {
          "Ref": "PrivateSubnet"
        },
        "GroupSet": [
          {
            "Ref": "BasicLinuxSecurityGroup"
          }
        ],
        "PrivateIpAddress": "172.16.0.22"
      }
    },
    "BasicLinuxSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enables Admin Access to basic linux hosts",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "SourceSecurityGroupId": {
              "Ref": "RedTeamSecurityGroup"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "SourceSecurityGroupId": {
              "Ref": "RedTeamSecurityGroup"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "5050",
            "ToPort": "5050",
            "SourceSecurityGroupId": {
              "Ref": "RedTeamSecurityGroup"
            }
          },
          {
            "IpProtocol": "icmp",
            "FromPort": "-1",
            "ToPort": "-1",
            "SourceSecurityGroupId": {
              "Ref": "RedTeamSecurityGroup"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "SourceSecurityGroupId": {
              "Ref": "BastionSecurityGroup"
            }
          }
        ]
      }
    },
    "BasicLinuxTarget": {
      "Type": "AWS::EC2::Instance",
      "DependsOn": "wazuh",
      "Properties": {
        "KeyName": {
          "Ref": "KeyPairName"
        },
        "NetworkInterfaces": [
          {
            "NetworkInterfaceId": {
              "Ref": "BasicLinuxNetInt"
            },
            "DeviceIndex": "0"
          }
        ],
        "IamInstanceProfile": {
          "Ref": "BasicLinuxInstanceProfile"
        },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash\n",
                "export PATH=$PATH:/usr/local/bin\n",
                "sudo hostname linuxVictim\n",
                "echo linuxVictim > /etc/hostname\n",
                "yum update -y\n",
                "yum install -y httpd24 php70 mysql56-server php70-mysqlnd gcc openssl-devel* nmap\n",
                "service httpd start\n",
                "export LOCAL_HOST=`curl http://169.254.169.254/latest/meta-data/local-hostname`\n",
                "wget -O /home/ec2-user/install https://d1wk0tztpsntt1.cloudfront.net/linux/latest/install\n",
                "chmod +x /home/ec2-user/install\n",
                "bash /home/ec2-user/install -u false\n",
                "wget -O /home/ec2-user/installWazuh https://raw.githubusercontent.com/sonofagl1tch/AWSDetonationLab/master/additionalInstallationScripts/installWazuhAgent.sh\n",
                "chmod +x /home/ec2-user/installWazuh\n",
                "bash /home/ec2-user/installWazuh -u false\n",
                "wget -O /home/ec2-user/setupVunlerableWebServer https://raw.githubusercontent.com/sonofagl1tch/AWSDetonationLab/master/additionalInstallationScripts/setupVunlerableWebServer.sh\n",
                "chmod +x /home/ec2-user/setupVunlerableWebServer\n",
                "bash /home/ec2-user/setupVunlerableWebServer -u false\n"
              ]
            ]
          }
        },
        "InstanceType": {
          "Ref": "InstanceTypeParameterlinux"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            "0",
            {
              "Ref": "AvailabilityZones"
            }
          ]
        },
        "ImageId": {
          "Ref": "LatestLinuxAMI"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "-BasicLinuxTarget"
                ]
              ]
            }
          }
        ]
      }
    },
    "BasicWindowsIAMRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/"
      }
    },
    "BasicWindowsInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Roles": [
          {
            "Ref": "BasicWindowsIAMRole"
          }
        ],
        "Path": "/"
      }
    },
    "BasicWindowsNetInt": {
      "Type": "AWS::EC2::NetworkInterface",
      "Properties": {
        "SubnetId": {
          "Ref": "PrivateSubnet"
        },
        "GroupSet": [
          {
            "Ref": "BasicWindowsSecurityGroup"
          }
        ],
        "PrivateIpAddress": "172.16.0.23"
      }
    },
    "BasicWindowsSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enables Admin Access to basic windows hosts",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "3389",
            "ToPort": "3389",
            "SourceSecurityGroupId": {
              "Ref": "RedTeamSecurityGroup"
            }
          },
          {
            "IpProtocol": "icmp",
            "FromPort": "-1",
            "ToPort": "-1",
            "SourceSecurityGroupId": {
              "Ref": "RedTeamSecurityGroup"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "3389",
            "ToPort": "3389",
            "SourceSecurityGroupId": {
              "Ref": "BastionSecurityGroup"
            }
          }
        ]
      }
    },
    "BasicWindowsTarget": {
      "DependsOn": "wazuh",
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "KeyName": {
          "Ref": "KeyPairName"
        },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "<powershell>\n",
                "Rename-Computer -NewName windowsVictim\n",
                "Invoke-WebRequest -Uri \"https://raw.githubusercontent.com/sonofagl1tch/AWSDetonationLab/master/additionalInstallationScripts/installWazuhAgent.ps1\" -OutFile \"C:\\Users\\Administrator\\Desktop\\installWazuhAgent.ps1\"\n",
                "Set-ExecutionPolicy -ExecutionPolicy Bypass # see comments\n",
                "C:\\Users\\Administrator\\Desktop\\installWazuhAgent.ps1\n",
                "</powershell>"
              ]
            ]
          }
        },
        "NetworkInterfaces": [
          {
            "NetworkInterfaceId": {
              "Ref": "BasicWindowsNetInt"
            },
            "DeviceIndex": "0"
          }
        ],
        "InstanceType": {
          "Ref": "InstanceTypeParameterwindows"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            "0",
            {
              "Ref": "AvailabilityZones"
            }
          ]
        },
        "ImageId": {
          "Ref": "LatestWindows2012R2AMI"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "-BasicWindowsTarget"
                ]
              ]
            }
          }
        ]
      }
    },
    "BastionAutoScalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "LaunchConfigurationName": {
          "Ref": "BastionLaunchConfiguration"
        },
        "VPCZoneIdentifier": [
          {
            "Ref": "PublicSubnet"
          }
        ],
        "MinSize": "1",
        "MaxSize": "2",
        "Cooldown": "300",
        "DesiredCapacity": "1",
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "-LinuxBastion"
                ]
              ]
            },
            "PropagateAtLaunch": "true"
          }
        ]
      },
      "CreationPolicy": {
        "ResourceSignal": {
          "Count": "1",
          "Timeout": "PT30M"
        }
      }
    },
    "BastionHostProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Roles": [
          {
            "Ref": "BastionHostRole"
          }
        ],
        "Path": "/"
      }
    },
    "BastionHostRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Policies": [
          {
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:GetLogEvents",
                    "logs:PutLogEvents",
                    "logs:DescribeLogGroups",
                    "logs:DescribeLogStreams",
                    "logs:PutRetentionPolicy",
                    "logs:PutMetricFilter",
                    "logs:CreateLogGroup"
                  ],
                  "Resource": {
                    "Fn::Sub": [
                      "arn:${Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${BastionMainLogGroup}:*",
                      {
                        "Partition": {
                          "Fn::If": [
                            "GovCloudCondition",
                            "aws-us-gov",
                            "aws"
                          ]
                        }
                      }
                    ]
                  },
                  "Effect": "Allow"
                }
              ]
            },
            "PolicyName": "bastion-cloudwatch-logs-policy"
          },
          {
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Action": [
                    "ec2:AssociateAddress",
                    "ec2:DescribeAddresses"
                  ],
                  "Resource": [
                    "*"
                  ],
                  "Effect": "Allow"
                }
              ]
            },
            "PolicyName": "bastion-eip-policy"
          }
        ],
        "Path": "/",
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Effect": "Allow"
            }
          ],
          "Version": "2012-10-17"
        }
      }
    },
    "BastionLaunchConfiguration": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "config": {
            "b-bootstrap": {
              "command": {
                "Fn::Join": [
                  "",
                  [
                    "/tmp/bastion_bootstrap.sh",
                    " --banner ",
                    "https://raw.githubusercontent.com/sonofagl1tch/AWSDetonationLab/master/artifacts/banner_message.txt",
                    " --enable true",
                    " --tcp-forwarding true",
                    " --x11-forwarding false"
                  ]
                ]
              }
            }
          }
        }
      },
      "Properties": {
        "KeyName": {
          "Ref": "KeyPairName"
        },
        "IamInstanceProfile": {
          "Ref": "BastionHostProfile"
        },
        "ImageId": {
          "Ref": "LatestLinuxAMI"
        },
        "SecurityGroups": [
          {
            "Ref": "BastionSecurityGroup"
          }
        ],
        "InstanceType": "t2.small",
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash\n",
                "export PATH=$PATH:/usr/local/bin\n",
                "sudo hostname bastion\n",
                "echo bastion > /etc/hostname\n",
                "yum update -y\n",
                "yum install nmap -y\n",
                "easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n",
                "curl -L -o /tmp/bastion_bootstrap.sh https://raw.githubusercontent.com/sonofagl1tch/AWSDetonationLab/master/additionalInstallationScripts/bastion_bootstrap.sh\n",
                "chown root: /tmp/bastion_bootstrap.sh\n",
                "chmod +x /tmp/bastion_bootstrap.sh\n",
                "EIP_LIST=\"",
                {
                  "Ref": "EIP"
                },
                ",Null,Null,Null",
                "\"\n",
                "CLOUDWATCHGROUP=",
                {
                  "Ref": "BastionMainLogGroup"
                },
                "\n",
                "/tmp/bastion_bootstrap.sh",
                " --banner ",
                "https://raw.githubusercontent.com/awslabs/amazon-guardduty-tester/master/artifacts/banner_message.txt",
                " --enable true",
                " --tcp-forwarding true",
                " --x11-forwarding false",
                "\n",
                "/opt/aws/bin/cfn-signal -e $? --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                " --resource BastionAutoScalingGroup --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n",
                "wget -O /home/ec2-user/installWazuh https://raw.githubusercontent.com/sonofagl1tch/AWSDetonationLab/master/additionalInstallationScripts/installWazuhAgent.sh\n",
                "chmod +x /home/ec2-user/installWazuh\n",
                "bash /home/ec2-user/installWazuh -u false\n",
                "\n"
              ]
            ]
          }
        }
      }
    },
    "BastionMainLogGroup": {
      "Type": "AWS::Logs::LogGroup"
    },
    "BastionSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enables SSH Access to Bastion Hosts",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": {
              "Ref": "RemoteAccessCIDR"
            }
          }
        ]
      }
    },
    "CloudWatchToKinesis": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": {
                  "Fn::Join": [
                    "",
                    [
                      "logs.",
                      {
                        "Ref": "AWS::Region"
                      },
                      ".amazonaws.com"
                    ]
                  ]
                }
              },
              "Action": "sts:AssumeRole"
            }
          ]
        }
      }
    },
    "CloudWatchToKinesisPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "kinesis",
        "Roles": [
          {
            "Ref": "CloudWatchToKinesis"
          }
        ],
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "kinesis:PutRecord"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "LogStream",
                    "Arn"
                  ]
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": "iam:PassRole",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "CloudWatchToKinesis",
                    "Arn"
                  ]
                }
              ]
            }
          ]
        }
      }
    },
    "DHCPOptions": {
      "Type": "AWS::EC2::DHCPOptions",
      "Properties": {
        "DomainName": {
          "Fn::If": [
            "NVirginiaRegionCondition",
            "ec2.internal",
            {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::Region"
                  },
                  ".compute.internal"
                ]
              ]
            }
          ]
        },
        "DomainNameServers": [
          "AmazonProvidedDNS"
        ]
      }
    },
    "EIP": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc"
      }
    },
    "FirehosedeliverystreamGuardDuty": {
      "DependsOn": [
        "firehosedeliveryPolicyAll"
      ],
      "Type": "AWS::KinesisFirehose::DeliveryStream",
      "Properties": {
        "ExtendedS3DestinationConfiguration": {
          "BucketARN": {
            "Fn::Join": [
              "",
              [
                "arn:aws:s3:::",
                {
                  "Ref": "S3BucketAll"
                }
              ]
            ]
          },
          "BufferingHints": {
            "IntervalInSeconds": "300",
            "SizeInMBs": "5"
          },
          "CompressionFormat": "UNCOMPRESSED",
          "Prefix": "guardduty/",
          "RoleARN": {
            "Fn::GetAtt": [
              "firehosedeliveryRoleAll",
              "Arn"
            ]
          },
          "ProcessingConfiguration": {
            "Enabled": "false"
          }
        }
      }
    },
    "FirehosedeliverystreamIAM": {
      "DependsOn": [
        "firehosedeliveryPolicyAll"
      ],
      "Type": "AWS::KinesisFirehose::DeliveryStream",
      "Properties": {
        "ExtendedS3DestinationConfiguration": {
          "BucketARN": {
            "Fn::Join": [
              "",
              [
                "arn:aws:s3:::",
                {
                  "Ref": "S3BucketAll"
                }
              ]
            ]
          },
          "BufferingHints": {
            "IntervalInSeconds": "300",
            "SizeInMBs": "5"
          },
          "CompressionFormat": "UNCOMPRESSED",
          "Prefix": "iam/",
          "RoleARN": {
            "Fn::GetAtt": [
              "firehosedeliveryRoleIAM",
              "Arn"
            ]
          },
          "ProcessingConfiguration": {
            "Enabled": "false"
          }
        }
      }
    },
    "FirehosedeliverystreamMacie": {
      "DependsOn": [
        "firehosedeliveryPolicyAll"
      ],
      "Type": "AWS::KinesisFirehose::DeliveryStream",
      "Properties": {
        "ExtendedS3DestinationConfiguration": {
          "BucketARN": {
            "Fn::Join": [
              "",
              [
                "arn:aws:s3:::",
                {
                  "Ref": "S3BucketAll"
                }
              ]
            ]
          },
          "BufferingHints": {
            "IntervalInSeconds": "300",
            "SizeInMBs": "5"
          },
          "CompressionFormat": "UNCOMPRESSED",
          "Prefix": "macie/",
          "RoleARN": {
            "Fn::GetAtt": [
              "firehosedeliveryRoleAll",
              "Arn"
            ]
          },
          "ProcessingConfiguration": {
            "Enabled": "false"
          }
        }
      }
    },
    "FlowLogUpload": {
      "Type": "AWS::EC2::FlowLog",
      "Properties": {
        "LogDestination": {
          "Fn::Join": [
            "",
            [
              {
                "Fn::GetAtt": [
                  "S3BucketAll",
                  "Arn"
                ]
              },
              "/vpc"
            ]
          ]
        },
        "LogDestinationType": "s3",
        "ResourceId": {
          "Ref": "VPC"
        },
        "ResourceType": "VPC",
        "TrafficType": "ALL"
      }
    },
    "IamPolicyDescribeFlowLogs": {
      "Type": "AWS::IAM::Policy",
      "DependsOn": "wazuhUser",
      "Properties": {
        "Users": [
          {
            "Ref": "wazuhUser"
          }
        ],
        "PolicyName": "wazuh-describe-flowlogs-detlab",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "ec2:DescribeFlowLogs"
              ],
              "Resource": "*"
            }
          ]
        }
      }
    },
    "IamPolicyWazuhInspectorFindings": {
      "Type": "AWS::IAM::Policy",
      "DependsOn": "wazuhUser",
      "Properties": {
        "Users": [
          {
            "Ref": "wazuhUser"
          }
        ],
        "PolicyName": "wazuh-describe-inspector-findings",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "inspector:ListFindings",
                "inspector:DescribeFindings"
              ],
              "Resource": [
                "*"
              ]
            }
          ]
        }
      }
    },
    "IamPolicyWazuhAccessS3": {
      "Type": "AWS::IAM::Policy",
      "DependsOn": "wazuhUser",
      "Properties": {
        "Users": [
          {
            "Ref": "wazuhUser"
          }
        ],
        "PolicyName": "wazuh-read-detlab-s3buckets",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "s3:*"
              ],
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:s3:::",
                      {
                        "Ref": "S3BucketAll"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:s3:::",
                      {
                        "Ref": "S3BucketAll"
                      }
                    ]
                  ]
                }
              ]
            }
          ]
        }
      }
    },
    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Network",
            "Value": "Public"
          }
        ]
      }
    },
    "LogStream": {
      "Type": "AWS::Kinesis::Stream",
      "Properties": {
        "ShardCount": {
          "Fn::FindInMap": [
            "Defaults",
            "Stream",
            "ShardCount"
          ]
        }
      }
    },
    "NATEIP": {
      "DependsOn": "VPCGatewayAttachment",
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc",
        "InstanceId": {
          "Fn::If": [
            "NATInstanceCondition",
            {
              "Ref": "NATInstance"
            },
            {
              "Ref": "AWS::NoValue"
            }
          ]
        }
      }
    },
    "NATGateway": {
      "Condition": "NATGatewayCondition",
      "DependsOn": "VPCGatewayAttachment",
      "Type": "AWS::EC2::NatGateway",
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": [
            "NATEIP",
            "AllocationId"
          ]
        },
        "SubnetId": {
          "Ref": "PublicSubnet"
        }
      }
    },
    "NATInstance": {
      "Condition": "NATInstanceCondition",
      "DependsOn": "VPCGatewayAttachment",
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "AWSAMIRegionMap",
            {
              "Ref": "AWS::Region"
            },
            "AWSNATHVM"
          ]
        },
        "InstanceType": {
          "Ref": "InstanceTypeParameterlinux"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "NAT"
          }
        ],
        "NetworkInterfaces": [
          {
            "GroupSet": [
              {
                "Ref": "NATInstanceSecurityGroup"
              }
            ],
            "AssociatePublicIpAddress": "true",
            "DeviceIndex": "0",
            "DeleteOnTermination": "true",
            "SubnetId": {
              "Ref": "PublicSubnet"
            }
          }
        ],
        "KeyName": {
          "Fn::If": [
            "NATInstanceCondition",
            {
              "Ref": "KeyPairName"
            },
            {
              "Ref": "AWS::NoValue"
            }
          ]
        },
        "SourceDestCheck": "false"
      }
    },
    "NATInstanceSecurityGroup": {
      "Condition": "NATInstanceCondition",
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enables outbound internet access for the VPC via the NAT instances",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "-1",
            "FromPort": "1",
            "ToPort": "65535",
            "CidrIp": {
              "Ref": "VPCCIDR"
            }
          }
        ]
      }
    },
    "PrivateSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": {
          "Ref": "PrivateSubnetCIDR"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            "0",
            {
              "Ref": "AvailabilityZones"
            }
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "Private subnet"
          },
          {
            "Key": "Network",
            "Value": "Private"
          }
        ]
      }
    },
    "PrivateSubnetRoute": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "PrivateSubnetRouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "InstanceId": {
          "Fn::If": [
            "NATInstanceCondition",
            {
              "Ref": "NATInstance"
            },
            {
              "Ref": "AWS::NoValue"
            }
          ]
        },
        "NatGatewayId": {
          "Fn::If": [
            "NATGatewayCondition",
            {
              "Ref": "NATGateway"
            },
            {
              "Ref": "AWS::NoValue"
            }
          ]
        }
      }
    },
    "PrivateSubnetRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "Private subnet"
          },
          {
            "Key": "Network",
            "Value": "Private"
          }
        ]
      }
    },
    "PrivateSubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PrivateSubnet"
        },
        "RouteTableId": {
          "Ref": "PrivateSubnetRouteTable"
        }
      }
    },
    "PublicSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": {
          "Ref": "PublicSubnetCIDR"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            "0",
            {
              "Ref": "AvailabilityZones"
            }
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "Public subnet"
          },
          {
            "Key": "Network",
            "Value": "Public"
          }
        ],
        "MapPublicIpOnLaunch": true
      }
    },
    "PublicSubnetRoute": {
      "DependsOn": "VPCGatewayAttachment",
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicSubnetRouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "PublicSubnetRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "Public Subnets"
          },
          {
            "Key": "Network",
            "Value": "Public"
          }
        ]
      }
    },
    "PublicSubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PublicSubnet"
        },
        "RouteTableId": {
          "Ref": "PublicSubnetRouteTable"
        }
      }
    },
    "RedTeam": {
      "DependsOn": [
        "BasicLinuxTarget",
        "BasicWindowsTarget"
      ],
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "KeyName": {
          "Ref": "KeyPairName"
        },
        "NetworkInterfaces": [
          {
            "NetworkInterfaceId": {
              "Ref": "RedTeamNetInt"
            },
            "DeviceIndex": "0"
          }
        ],
        "IamInstanceProfile": {
          "Ref": "RedTeamInstanceProfile"
        },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash\n",
                "export PATH=$PATH:/usr/local/bin:/usr/sbin:/root/.local/bin\n",
                "echo 'export PATH=/root/.local/bin:/usr/sbin:$PATH' >> /home/ec2-user/.profile\n",
                "sudo hostname redTeam\n",
                "echo redTeam > /etc/hostname\n",
                "sudo amazon-linux-extras install epel -y\n",
                "yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm -y\n",
                "sudo yum-config-manager --enable epel\n",
                "yum update -y\n",
                "yum install openssl-devel perl perl-Net-SSLeay perl-Crypt-SSLeay nikto s3fs-fuse tcpdump tmux nmap bind-utils git python python2-pip python-argparse gcc gcc-c++ glib2-devel -y\n",
                "echo 'RFIURL=http://cirt.net/rfiinc.txt?' >> /etc/nikto/config\n",
                "yum install cmake openssl-devel libX11-devel libXi-devel libXtst-devel libXinerama-devel -y\n",
                "pip install paramiko\n",
                "export privateIP=`curl http://169.254.169.254/latest/meta-data/local-ipv4`\n",
                "curl -L https://raw.githubusercontent.com/sonofagl1tch/AWSDetonationLab/master/attacks/guardduty_tester.sh > /home/ec2-user/guardduty_tester.sh\n",
                "mkdir /home/ec2-user/compromised_keys\n",
                "mkdir /home/ec2-user/domains\n",
                "mkdir /home/ec2-user/passwords\n",
                "curl -L https://github.com/sonofagl1tch/AWSDetonationLab/blob/master/artifacts/queries.txt > /home/ec2-user/domains/queries.txt\n",
                "curl -L https://github.com/sonofagl1tch/AWSDetonationLab/blob/master/artifacts/password_list.txt > /home/ec2-user/passwords/password_list.txt\n",
                "curl -L https://github.com/sonofagl1tch/AWSDetonationLab/blob/master/artifacts/never_used_sample_key.foo > /home/ec2-user/compromised_keys/compromised.pem\n",
                "FILE=\"/home/ec2-user/compromised_keys/compromised.pem\"\n",
                "for FILE in {1..20}; do cp /home/ec2-user/compromised_keys/compromised.pem /home/ec2-user/compromised_keys/compromised$FILE.pem; done\n",
                "echo 'BASIC_LINUX_TARGET=\"",
                {
                  "Fn::GetAtt": [
                    "BasicLinuxTarget",
                    "PrivateIp"
                  ]
                },
                "\"' >> /home/ec2-user/localIps.sh\n",
                "echo 'BASIC_WINDOWS_TARGET=\"",
                {
                  "Fn::GetAtt": [
                    "BasicWindowsTarget",
                    "PrivateIp"
                  ]
                },
                "\"' >> /home/ec2-user/localIps.sh\n",
                "echo -n 'RED_TEAM_INSTANCE=\"' >> /home/ec2-user/localIps.sh\n",
                "wget -q -O - http://169.254.169.254/latest/meta-data/instance-id >> /home/ec2-user/localIps.sh\n",
                "echo '\"' >> /home/ec2-user/localIps.sh\n",
                "echo -n 'RED_TEAM_IP=\"' >> /home/ec2-user/localIps.sh\n",
                "wget -q -O - http://169.254.169.254/latest/meta-data/local-ipv4 >> /home/ec2-user/localIps.sh\n",
                "echo '\"' >> /home/ec2-user/localIps.sh\n",
                "echo 'BASIC_LINUX_INSTANCE=\"",
                {
                  "Ref": "BasicLinuxTarget"
                },
                "\"' >> /home/ec2-user/localIps.sh\n",
                "echo 'BASIC_WINDOWS_INSTANCE=\"",
                {
                  "Ref": "BasicWindowsTarget"
                },
                "\"' >> /home/ec2-user/localIps.sh\n",
                "mkdir /home/ec2-user/FreeRDP\n",
                "mkdir /home/ec2-user/thc-hydra\n",
                "git clone -b \"8.3\" https://github.com/vanhauser-thc/thc-hydra /home/ec2-user/thc-hydra\n",
                "cd /home/ec2-user/thc-hydra\n",
                "/home/ec2-user/thc-hydra/configure\n",
                "make\n",
                "make install\n",
                "git clone git://github.com/FreeRDP/FreeRDP.git /home/ec2-user/FreeRDP\n",
                "cd /home/ec2-user/FreeRDP\n",
                "cmake -DCMAKE_BUILD_TYPE=Debug -DWITH_SSE2=ON .\n",
                "make install\n",
                "echo '/usr/local/lib/freerdp' >> /etc/ld.so.conf.d/freerdp.conf\n",
                "ln -s /usr/local/bin/xfreerdp /usr/bin/xfreerdp\n",
                "cd /home/ec2-user\n",
                "git clone https://github.com/galkan/crowbar /home/ec2-user/crowbar\n",
                "chown -R ec2-user: /home/ec2-user\n",
                "chmod +x /home/ec2-user/guardduty_tester.sh\n",
                "chmod +x /home/ec2-user/crowbar/crowbar.py\n",
                "wget -O /home/ec2-user/installCloudWatch https://raw.githubusercontent.com/sonofagl1tch/AWSDetonationLab/master/additionalInstallationScripts/cloudwatchAgentLogs.sh\n",
                "chmod +x /home/ec2-user/installCloudWatch\n",
                "bash /home/ec2-user/installCloudWatch -u false\n",
                "\n",
                "wget -O /home/ec2-user/installWazuh https://raw.githubusercontent.com/sonofagl1tch/AWSDetonationLab/master/additionalInstallationScripts/installWazuhAgent.sh\n",
                "chmod +x /home/ec2-user/installWazuh\n",
                "bash /home/ec2-user/installWazuh -u false\n",
                "\n"
              ]
            ]
          }
        },
        "InstanceType": {
          "Ref": "InstanceTypeParameterlinux"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            "0",
            {
              "Ref": "AvailabilityZones"
            }
          ]
        },
        "ImageId": {
          "Ref": "LatestLinuxAMI"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "-RedTeam"
                ]
              ]
            }
          }
        ]
      }
    },
    "RedTeamIAMRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Effect": "Allow"
            }
          ],
          "Version": "2012-10-17"
        },
        "Path": "/",
        "Policies": []
      }
    },
    "RedTeamInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Roles": [
          {
            "Ref": "RedTeamIAMRole"
          }
        ],
        "Path": "/"
      }
    },
    "RedTeamNetInt": {
      "Type": "AWS::EC2::NetworkInterface",
      "Properties": {
        "SubnetId": {
          "Ref": "PrivateSubnet"
        },
        "GroupSet": [
          {
            "Ref": "RedTeamSecurityGroup"
          }
        ],
        "PrivateIpAddress": "172.16.0.20"
      }
    },
    "RedTeamSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enables SSH Access to RedTeam Tools Host",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "SourceSecurityGroupId": {
              "Ref": "BastionSecurityGroup"
            }
          }
        ]
      }
    },
    "S3BucketAll": {
      "DeletionPolicy": "Retain",
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "LifecycleConfiguration": {
          "Rules": [
            {
              "Prefix": "vpc/",
              "Status": "Enabled",
              "ExpirationInDays": 7
            }
          ]
        }
      }
    },
    "S3BucketPolicyAll": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "S3BucketAll"
        },
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "AWSAllAclCheck",
              "Effect": "Allow",
              "Action": "s3:GetBucketAcl",
              "Principal": {
                "Service": [
                  "cloudtrail.amazonaws.com",
                  "guardduty.amazonaws.com",
                  "macie.amazonaws.com"
                ]
              },
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:s3:::",
                    {
                      "Ref": "S3BucketAll"
                    }
                  ]
                ]
              }
            },
            {
              "Sid": "AWSCloudTrailWrite",
              "Effect": "Allow",
              "Principal": {
                "Service": "cloudtrail.amazonaws.com"
              },
              "Action": "s3:PutObject",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:s3:::",
                    {
                      "Ref": "S3BucketAll"
                    },
                    "/cloudtrail/AWSLogs/",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    "/*"
                  ]
                ]
              },
              "Condition": {
                "StringEquals": {
                  "s3:x-amz-acl": "bucket-owner-full-control"
                }
              }
            },
            {
              "Sid": "AWSGuardDutyWrite",
              "Effect": "Allow",
              "Principal": {
                "Service": "guardduty.amazonaws.com"
              },
              "Action": "s3:PutObject",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:s3:::",
                    {
                      "Ref": "S3BucketAll"
                    },
                    "/guardduty/AWSLogs/",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    "/*"
                  ]
                ]
              },
              "Condition": {
                "StringEquals": {
                  "s3:x-amz-acl": "bucket-owner-full-control"
                }
              }
            },
            {
              "Sid": "AWSmacieWrite",
              "Effect": "Allow",
              "Principal": {
                "Service": "macie.amazonaws.com"
              },
              "Action": "s3:PutObject",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:s3:::",
                    {
                      "Ref": "S3BucketAll"
                    },
                    "/macie/AWSLogs/",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    "/*"
                  ]
                ]
              },
              "Condition": {
                "StringEquals": {
                  "s3:x-amz-acl": "bucket-owner-full-control"
                }
              }
            }
          ]
        }
      }
    },
    "SSHMetricFilter": {
      "Type": "AWS::Logs::MetricFilter",
      "Properties": {
        "LogGroupName": {
          "Ref": "BastionMainLogGroup"
        },
        "FilterPattern": "ON FROM USER PWD",
        "MetricTransformations": [
          {
            "MetricName": "SSHCommandCount",
            "MetricValue": 1,
            "MetricNamespace": {
              "Fn::Join": [
                "/",
                [
                  "AWSQuickStart",
                  {
                    "Ref": "AWS::StackName"
                  }
                ]
              ]
            }
          }
        ]
      }
    },
    "VPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": {
          "Ref": "VPCCIDR"
        },
        "InstanceTenancy": "default",
        "EnableDnsSupport": "true",
        "EnableDnsHostnames": "true",
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          }
        ]
      }
    },
    "VPCDHCPOptionsAssociation": {
      "Type": "AWS::EC2::VPCDHCPOptionsAssociation",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "DhcpOptionsId": {
          "Ref": "DHCPOptions"
        }
      }
    },
    "VPCGatewayAttachment": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "WazuhAgentTrafficSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "this will allow for the wazuh agent to send traffic to wazuh server",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "udp",
            "FromPort": "1514",
            "ToPort": "1514",
            "SourceSecurityGroupId": {
              "Ref": "BastionSecurityGroup"
            }
          },
          {
            "IpProtocol": "udp",
            "FromPort": "1514",
            "ToPort": "1514",
            "SourceSecurityGroupId": {
              "Ref": "RedTeamSecurityGroup"
            }
          },
          {
            "IpProtocol": "udp",
            "FromPort": "1514",
            "ToPort": "1514",
            "SourceSecurityGroupId": {
              "Ref": "BasicLinuxSecurityGroup"
            }
          },
          {
            "IpProtocol": "udp",
            "FromPort": "1514",
            "ToPort": "1514",
            "SourceSecurityGroupId": {
              "Ref": "BasicWindowsSecurityGroup"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "1515",
            "ToPort": "1515",
            "SourceSecurityGroupId": {
              "Ref": "BasicLinuxSecurityGroup"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "1515",
            "ToPort": "1515",
            "SourceSecurityGroupId": {
              "Ref": "BasicWindowsSecurityGroup"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "1515",
            "ToPort": "1515",
            "SourceSecurityGroupId": {
              "Ref": "BastionSecurityGroup"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "1515",
            "ToPort": "1515",
            "SourceSecurityGroupId": {
              "Ref": "RedTeamSecurityGroup"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "55000",
            "ToPort": "55000",
            "SourceSecurityGroupId": {
              "Ref": "BasicLinuxSecurityGroup"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "55000",
            "ToPort": "55000",
            "SourceSecurityGroupId": {
              "Ref": "BasicWindowsSecurityGroup"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "55000",
            "ToPort": "55000",
            "SourceSecurityGroupId": {
              "Ref": "BastionSecurityGroup"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "55000",
            "ToPort": "55000",
            "SourceSecurityGroupId": {
              "Ref": "RedTeamSecurityGroup"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "9200",
            "ToPort": "9200",
            "SourceSecurityGroupId": {
              "Ref": "BasicLinuxSecurityGroup"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "9200",
            "ToPort": "9200",
            "SourceSecurityGroupId": {
              "Ref": "BastionSecurityGroup"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "9200",
            "ToPort": "9200",
            "SourceSecurityGroupId": {
              "Ref": "RedTeamSecurityGroup"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "9200",
            "ToPort": "9200",
            "SourceSecurityGroupId": {
              "Ref": "BasicWindowsSecurityGroup"
            }
          }
        ]
      }
    },
    "cloudwatchLogWrite": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": {
                  "Fn::Join": [
                    "",
                    [
                      "logs.",
                      {
                        "Ref": "AWS::Region"
                      },
                      ".amazonaws.com"
                    ]
                  ]
                }
              },
              "Action": "sts:AssumeRole"
            }
          ]
        }
      }
    },
    "cloudwatchLogWritePolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "cloudwatchLogWrite",
        "Roles": [
          {
            "Ref": "cloudwatchLogWrite"
          }
        ],
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
                "logs:DescribeLogStreams"
              ],
              "Resource": [
                "arn:aws:logs:*:*:*"
              ]
            }
          ]
        }
      }
    },
    "detonationLabLinux": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "RetentionInDays": 7
      }
    },
    "detonationLabWindows": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "RetentionInDays": 7
      }
    },
    "detonationLabCloudTrail": {
      "DependsOn": [
        "S3BucketPolicyAll"
      ],
      "Type": "AWS::CloudTrail::Trail",
      "Properties": {
        "S3BucketName": {
          "Ref": "S3BucketAll"
        },
        "IsLogging": true,
        "S3KeyPrefix": "cloudtrail"
      }
    },
    "firehosedeliveryPolicyAll": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "firehose_delivery_policy_All",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "s3:AbortMultipartUpload",
                "s3:GetBucketLocation",
                "s3:GetObject",
                "s3:ListBucket",
                "s3:ListBucketMultipartUploads",
                "s3:PutObject"
              ],
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:s3:::",
                      {
                        "Ref": "S3BucketAll"
                      }
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:s3:::",
                      {
                        "Ref": "S3BucketAll"
                      },
                      "*"
                    ]
                  ]
                }
              ]
            }
          ]
        },
        "Roles": [
          {
            "Ref": "firehosedeliveryRoleAll"
          }
        ]
      }
    },
    "wazuh": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "KeyName": {
          "Ref": "KeyPairName"
        },
        "NetworkInterfaces": [
          {
            "NetworkInterfaceId": {
              "Ref": "wazuhNetInt"
            },
            "DeviceIndex": "0"
          }
        ],
        "IamInstanceProfile": {
          "Ref": "BasicLinuxInstanceProfile"
        },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash\n",
                "export PATH=$PATH:/usr/local/bin\n",
                "sudo hostname wazuhServer\n",
                "echo wazuhServer > /etc/hostname\n",
                "yum update -y\n",
                "wget -O /home/ec2-user/install https://raw.githubusercontent.com/sonofagl1tch/AWSDetonationLab/master/additionalInstallationScripts/installWazuh.sh\n",
                "chmod +x /home/ec2-user/install\n",
                "bash /home/ec2-user/install -u false\n",
                "sed -i 's/alllogging/",
                {
                  "Ref": "S3BucketAll"
                },
                "/' /var/ossec/etc/ossec.conf\n",
                "sed -i 's/insert_access_key/",
                {
                  "Ref": "wazuhUserAccessKey"
                },
                "/' /var/ossec/etc/ossec.conf\n",
                "sed -i 's:insert_secret_key:",
                {
                  "Fn::GetAtt": [
                    "wazuhUserAccessKey",
                    "SecretAccessKey"
                  ]
                },
                ":' /var/ossec/etc/ossec.conf\n",
                "cat >> /var/ossec/etc/ossec.conf <<\\EOF\n",
                {
                  "Fn::If": [
                    "ConfigureVTWazuh",
                    {
                      "Fn::Join": [
                        "",
                        [
                          "<ossec_config>\n",
                          "  <integration>\n",
                          "    <name>virustotal</name>\n",
                          "    <api_key>",
                          {
                            "Ref": "VirusTotalAPIKey"
                          },
                          "</api_key>\n",
                          "    <group>syscheck</group>\n",
                          "    <alert_format>json</alert_format>\n",
                          "  </integration>\n",
                          "</ossec_config>\n"
                        ]
                      ]
                    },
                    ""
                  ]
                },
                "EOF\n",
                "/var/ossec/bin/ossec-control restart\n"
              ]
            ]
          }
        },
        "InstanceType": {
          "Ref": "InstanceTypeParameterWazuh"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            "0",
            {
              "Ref": "AvailabilityZones"
            }
          ]
        },
        "ImageId": {
          "Ref": "LatestLinuxAMI"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "-WazuhServer"
                ]
              ]
            }
          }
        ]
      }
    },
    "wazuhNetInt": {
      "Type": "AWS::EC2::NetworkInterface",
      "Properties": {
        "SubnetId": {
          "Ref": "PrivateSubnet"
        },
        "GroupSet": [
          {
            "Ref": "BasicLinuxSecurityGroup"
          },
          {
            "Ref": "WazuhAgentTrafficSecurityGroup"
          }
        ],
        "PrivateIpAddress": "172.16.0.21"
      }
    },
    "wazuhUser": {
      "Type": "AWS::IAM::User",
      "Properties": {
        "Path": "/"
      }
    },
    "CloudwatchEventRuleAll": {
      "DependsOn": [
        "cloudwatchEventsInvokeKinesisTargetRole"
      ],
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Description": "Events Rule with KinesisParameters",
        "EventPattern": {
          "source": [
            "aws.guardduty",
            "aws.iam",
            "aws.macie"
          ]
        },
        "RoleArn": {
          "Fn::GetAtt": [
            "cloudwatchEventsInvokeKinesisTargetRole",
            "Arn"
          ]
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Id": "Id123",
            "Arn": {
              "Fn::GetAtt": [
                "FirehosedeliverystreamGuardDuty",
                "Arn"
              ]
            },
            "RoleArn": {
              "Fn::GetAtt": [
                "cloudwatchEventsInvokeKinesisTargetRole",
                "Arn"
              ]
            }
          },
          {
            "Id": "Id124",
            "Arn": {
              "Fn::GetAtt": [
                "FirehosedeliverystreamIAM",
                "Arn"
              ]
            },
            "RoleArn": {
              "Fn::GetAtt": [
                "cloudwatchEventsInvokeKinesisTargetRole",
                "Arn"
              ]
            }
          },
          {
            "Id": "Id125",
            "Arn": {
              "Fn::GetAtt": [
                "FirehosedeliverystreamMacie",
                "Arn"
              ]
            },
            "RoleArn": {
              "Fn::GetAtt": [
                "cloudwatchEventsInvokeKinesisTargetRole",
                "Arn"
              ]
            }
          }
        ]
      }
    },
    "cloudwatchEventsInvokeKinesisTargetRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "",
              "Effect": "Allow",
              "Principal": {
                "Service": "events.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        }
      }
    },
    "cloudwatchEventsInvokeKinesisTargetPolicyAll": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "firehose_delivery_policy_EventsInvoke-All",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "firehose:PutRecord",
                "firehose:PutRecordBatch"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "FirehosedeliverystreamGuardDuty",
                    "Arn"
                  ]
                },
                {
                  "Fn::GetAtt": [
                    "FirehosedeliverystreamIAM",
                    "Arn"
                  ]
                },
                {
                  "Fn::GetAtt": [
                    "FirehosedeliverystreamMacie",
                    "Arn"
                  ]
                }
              ]
            }
          ]
        },
        "Roles": [
          {
            "Ref": "cloudwatchEventsInvokeKinesisTargetRole"
          }
        ]
      }
    },
    "wazuhUserAccessKey": {
      "Type": "AWS::IAM::AccessKey",
      "Properties": {
        "Status": "Active",
        "UserName": {
          "Ref": "wazuhUser"
        }
      }
    },
    "firehosedeliveryRoleAll": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "",
              "Effect": "Allow",
              "Principal": {
                "Service": "firehose.amazonaws.com"
              },
              "Action": "sts:AssumeRole",
              "Condition": {
                "StringEquals": {
                  "sts:ExternalId": {
                    "Ref": "AWS::AccountId"
                  }
                }
              }
            }
          ]
        }
      }
    },
    "firehosedeliveryRoleIAM": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "",
              "Effect": "Allow",
              "Principal": {
                "Service": "firehose.amazonaws.com"
              },
              "Action": "sts:AssumeRole",
              "Condition": {
                "StringEquals": {
                  "sts:ExternalId": {
                    "Ref": "AWS::AccountId"
                  }
                }
              }
            }
          ]
        }
      }
    },
  },
  "Conditions": {
    "GovCloudCondition": {
      "Fn::Equals": [
        {
          "Ref": "AWS::Region"
        },
        "us-gov-west-1"
      ]
    },
    "NATInstanceCondition": {
      "Fn::Equals": [
        {
          "Ref": "AWS::Region"
        },
        "us-gov-west-1"
      ]
    },
    "NATGatewayCondition": {
      "Fn::Not": [
        {
          "Condition": "GovCloudCondition"
        }
      ]
    },
    "NVirginiaRegionCondition": {
      "Fn::Equals": [
        {
          "Ref": "AWS::Region"
        },
        "us-east-1"
      ]
    },
    "ConfigureVTWazuh": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "VirusTotalAPIKey"
            },
            "None"
          ]
        }
      ]
    }
  },
  "Mappings": {
    "AWSAMIRegionMap": {
      "NATAMI": {
        "AWSNATHVM": "amzn-ami-vpc-nat-hvm-2018.03.0.20180816-x86_64-ebs"
      },
      "us-gov-west-1": {
        "AWSNATHVM": "ami-c177eba0"
      }
    },
    "Defaults": {
      "LogGroup": {
        "RetentionInDays": 1
      },
      "Stream": {
        "ShardCount": 10
      },
      "EventSourceMapping": {
        "BatchSize": 10000
      }
    }
  },
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": {
            "default": "Network Configuration"
          },
          "Parameters": [
            "AvailabilityZones",
            "VPCCIDR",
            "PrivateSubnet1CIDR",
            "PublicSubnet1CIDR",
            "RemoteAccessCIDR"
          ]
        },
        {
          "Label": {
            "default": "Amazon EC2 Configuration"
          },
          "Parameters": [
            "KeyPairName"
          ]
        }
      ],
      "ParameterLabels": {
        "AvailabilityZones": {
          "default": "Availability Zones"
        },
        "KeyPairName": {
          "default": "Key Pair Name"
        },
        "PrivateSubnetCIDR": {
          "default": "Private Subnet CIDR"
        },
        "PublicSubnetCIDR": {
          "default": "Public Subnet CIDR"
        },
        "RemoteAccessCIDR": {
          "default": "Allowed Bastion External Access CIDR"
        },
        "VPCCIDR": {
          "default": "VPC CIDR"
        }
      }
    }
  },
  "Outputs": {
    "BastionIp": {
      "Description": "Elastic IP for Bastion",
      "Value": {
        "Ref": "EIP"
      }
    },
    "RedTeamIp": {
      "Description": "Local IP for RedTeam Instance",
      "Value": {
        "Fn::GetAtt": [
          "RedTeam",
          "PrivateIp"
        ]
      }
    },
    "getWazuhAccessKey": {
      "Description": "get wazuh access key",
      "Value": {
        "Ref": "wazuhUserAccessKey"
      }
    },
    "getWazuhsecretKey": {
      "Description": "get wazuh access key",
      "Value": {
        "Fn::GetAtt": [
          "wazuhUserAccessKey",
          "SecretAccessKey"
        ]
      }
    }
  },
  "Parameters": {
    "AvailabilityZones": {
      "Description": "Availability Zone to use for the subnets in the VPC. You can select many, but we just use 1 (the first).",
      "Default": "us-east-1",
      "Type": "List<AWS::EC2::AvailabilityZone::Name>"
    },
    "KeyPairName": {
      "Description": "Public/private key pairs allow you to securely connect to your instance after it launches",
      "Type": "AWS::EC2::KeyPair::KeyName"
    },
    "PrivateSubnetCIDR": {
      "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$",
      "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28",
      "Default": "172.16.0.16/28",
      "Description": "CIDR block for isolated private subnet.",
      "Type": "String"
    },
    "PublicSubnetCIDR": {
      "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$",
      "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28",
      "Default": "172.16.0.0/28",
      "Description": "CIDR Block for the public DMZ subnet for secure administrative entry",
      "Type": "String"
    },
    "RemoteAccessCIDR": {
      "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$",
      "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/x",
      "Default": "0.0.0.0/0",
      "Description": "CIDR from which access to bastion is to be permitted",
      "Type": "String"
    },
    "VPCCIDR": {
      "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$",
      "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28",
      "Default": "172.16.0.0/27",
      "Description": "CIDR Block for the VPC",
      "Type": "String"
    },
    "InstanceTypeParameterlinux": {
      "Type": "String",
      "Default": "t2.2xlarge",
      "AllowedValues": [
        "t2.micro",
        "t2.medium",
        "t2.large",
        "t2.2xlarge"
      ],
      "Description": "choose amazon Linux instance Type. Default is t2.2xlarge."
    },
    "InstanceTypeParameterWazuh": {
      "Type": "String",
      "Default": "t2.2xlarge",
      "AllowedValues": [
        "t2.micro",
        "t2.medium",
        "t2.large",
        "t2.2xlarge"
      ],
      "Description": "choose Wazuh Server amazon linux instance Type. Default is t2.2xlarge."
    },
    "InstanceTypeParameterwindows": {
      "Type": "String",
      "Default": "t2.2xlarge",
      "AllowedValues": [
        "t2.micro",
        "t2.medium",
        "t2.large",
        "t2.2xlarge"
      ],
      "Description": "choose Windows server 2016 instance Type. Default is t2.2xlarge."
    },
    "VirusTotalAPIKey": {
      "Type": "String",
      "Description": "Virus Total API key to use whith Wazuh's FIM module.",
      "Default": "None"
    },
    "LatestLinuxAMI": {
      "Type": "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
      "Default": "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"
    },
    "LatestWindows2012R2AMI": {
      "Type": "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
      "Default": "/aws/service/ami-windows-latest/Windows_Server-2012-R2_RTM-English-64Bit-Base"
    }
  }
}